// Code generated by MockGen. DO NOT EDIT.
// Source: ./backend/app/model/workout_session.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/everytv/pre-employment-training-2024/final/ikuma.esaki/backend/app/model"
)

// MockWorkoutSession is a mock of WorkoutSession interface.
type MockWorkoutSession struct {
	ctrl     *gomock.Controller
	recorder *MockWorkoutSessionMockRecorder
}

// MockWorkoutSessionMockRecorder is the mock recorder for MockWorkoutSession.
type MockWorkoutSessionMockRecorder struct {
	mock *MockWorkoutSession
}

// NewMockWorkoutSession creates a new mock instance.
func NewMockWorkoutSession(ctrl *gomock.Controller) *MockWorkoutSession {
	mock := &MockWorkoutSession{ctrl: ctrl}
	mock.recorder = &MockWorkoutSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkoutSession) EXPECT() *MockWorkoutSessionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWorkoutSession) Create(date time.Time, userId int64) (*model.WorkoutSessionImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", date, userId)
	ret0, _ := ret[0].(*model.WorkoutSessionImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWorkoutSessionMockRecorder) Create(date, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorkoutSession)(nil).Create), date, userId)
}

// Load mocks base method.
func (m *MockWorkoutSession) Load(id int64) (*model.WorkoutSessionImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", id)
	ret0, _ := ret[0].(*model.WorkoutSessionImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockWorkoutSessionMockRecorder) Load(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockWorkoutSession)(nil).Load), id)
}

// LoadByIDAndDate mocks base method.
func (m *MockWorkoutSession) LoadByIDAndDate(id int64, date time.Time) (*model.WorkoutSessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByIDAndDate", id, date)
	ret0, _ := ret[0].(*model.WorkoutSessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByIDAndDate indicates an expected call of LoadByIDAndDate.
func (mr *MockWorkoutSessionMockRecorder) LoadByIDAndDate(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByIDAndDate", reflect.TypeOf((*MockWorkoutSession)(nil).LoadByIDAndDate), id, date)
}

// Update mocks base method.
func (m *MockWorkoutSession) Update(attrs map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", attrs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWorkoutSessionMockRecorder) Update(attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkoutSession)(nil).Update), attrs)
}
