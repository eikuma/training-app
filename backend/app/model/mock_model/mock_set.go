// Code generated by MockGen. DO NOT EDIT.
// Source: ./backend/app/model/set.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/everytv/pre-employment-training-2024/final/ikuma.esaki/backend/app/model"
)

// MockSet is a mock of Set interface.
type MockSet struct {
	ctrl     *gomock.Controller
	recorder *MockSetMockRecorder
}

// MockSetMockRecorder is the mock recorder for MockSet.
type MockSetMockRecorder struct {
	mock *MockSet
}

// NewMockSet creates a new mock instance.
func NewMockSet(ctrl *gomock.Controller) *MockSet {
	mock := &MockSet{ctrl: ctrl}
	mock.recorder = &MockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSet) EXPECT() *MockSetMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSet) Create(exerciseID, setNumber int64, weight float64, reps int64) (*model.SetImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", exerciseID, setNumber, weight, reps)
	ret0, _ := ret[0].(*model.SetImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSetMockRecorder) Create(exerciseID, setNumber, weight, reps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSet)(nil).Create), exerciseID, setNumber, weight, reps)
}

// Load mocks base method.
func (m *MockSet) Load(id int64) (*model.SetImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", id)
	ret0, _ := ret[0].(*model.SetImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockSetMockRecorder) Load(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSet)(nil).Load), id)
}

// LoadByExerciseID mocks base method.
func (m *MockSet) LoadByExerciseID(exerciseId int64) (*model.Sets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByExerciseID", exerciseId)
	ret0, _ := ret[0].(*model.Sets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByExerciseID indicates an expected call of LoadByExerciseID.
func (mr *MockSetMockRecorder) LoadByExerciseID(exerciseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByExerciseID", reflect.TypeOf((*MockSet)(nil).LoadByExerciseID), exerciseId)
}

// Update mocks base method.
func (m *MockSet) Update(attrs map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", attrs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSetMockRecorder) Update(attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSet)(nil).Update), attrs)
}
