// Code generated by MockGen. DO NOT EDIT.
// Source: ./backend/app/model/exercise.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/everytv/pre-employment-training-2024/final/ikuma.esaki/backend/app/model"
)

// MockExercise is a mock of Exercise interface.
type MockExercise struct {
	ctrl     *gomock.Controller
	recorder *MockExerciseMockRecorder
}

// MockExerciseMockRecorder is the mock recorder for MockExercise.
type MockExerciseMockRecorder struct {
	mock *MockExercise
}

// NewMockExercise creates a new mock instance.
func NewMockExercise(ctrl *gomock.Controller) *MockExercise {
	mock := &MockExercise{ctrl: ctrl}
	mock.recorder = &MockExerciseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExercise) EXPECT() *MockExerciseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExercise) Create(sessionId int64, exerciseName string) (*model.ExerciseImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sessionId, exerciseName)
	ret0, _ := ret[0].(*model.ExerciseImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExerciseMockRecorder) Create(sessionId, exerciseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExercise)(nil).Create), sessionId, exerciseName)
}

// Load mocks base method.
func (m *MockExercise) Load(id int64) (*model.ExerciseImpl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", id)
	ret0, _ := ret[0].(*model.ExerciseImpl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockExerciseMockRecorder) Load(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockExercise)(nil).Load), id)
}

// LoadBySessionID mocks base method.
func (m *MockExercise) LoadBySessionID(sessionId int64) (*model.Exercises, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBySessionID", sessionId)
	ret0, _ := ret[0].(*model.Exercises)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBySessionID indicates an expected call of LoadBySessionID.
func (mr *MockExerciseMockRecorder) LoadBySessionID(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBySessionID", reflect.TypeOf((*MockExercise)(nil).LoadBySessionID), sessionId)
}

// Update mocks base method.
func (m *MockExercise) Update(attrs map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", attrs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExerciseMockRecorder) Update(attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExercise)(nil).Update), attrs)
}
